<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grails on Dan Tanner</title>
    <link>https://dantanner.com/categories/grails/</link>
    <description>Recent content in grails on Dan Tanner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Apr 2015 06:05:00 +0000</lastBuildDate><atom:link href="https://dantanner.com/categories/grails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic Grails Tomcat datasource configuration with Etcd</title>
      <link>https://dantanner.com/post/dynamic-grails-tomcat-datasource/</link>
      <pubDate>Thu, 30 Apr 2015 06:05:00 +0000</pubDate>
      
      <guid>https://dantanner.com/post/dynamic-grails-tomcat-datasource/</guid>
      <description>Ever wonder if you could modify a Grails datasource while the app is running? Probably not, and that&amp;rsquo;s totally fine&amp;hellip;most people don&amp;rsquo;t need to. We had a couple reasons though:
 During a disaster recovery situation where a non-clustered database goes down, you want to point all the apps at a failover database. By default this means you have to update the config and restart all the apps. On a typical AWS instance, this means at least a minute of downtime for a bigger Grails app.</description>
    </item>
    
    <item>
      <title>Groovy collect vs spread-dot operator</title>
      <link>https://dantanner.com/post/groovy-collect-vs-spread-dot-operator/</link>
      <pubDate>Sat, 15 Nov 2014 23:17:00 +0000</pubDate>
      
      <guid>https://dantanner.com/post/groovy-collect-vs-spread-dot-operator/</guid>
      <description>Yesterday I was doing some Groovy code cleanup with the wonderful CodeNarc static analysis tool. One of the violations it found was UnnecessaryCollectCall. The summary of the rule is &amp;ldquo;Some method calls to Object.collect(Closure) can be replaced with the spread operator.&amp;rdquo; e.g. Replace things.collect { it.name } with things*.name, or even things.name if what you&amp;rsquo;re after is a property.
But when I performed that refactoring and ran all the tests, some failed!</description>
    </item>
    
  </channel>
</rss>
